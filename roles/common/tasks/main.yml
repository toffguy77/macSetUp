---
- name: "DEBUG | STARTING COMMON ROLE INSTALLATION"
  debug:
    msg: "Beginning installation of common system tools and applications"

######################
# XCODE INSTALLATION #
######################

- name: "DEBUG | Starting Xcode installation section"
  debug:
    msg: "Starting Xcode and Developer Tools installation"

- name: "Xcode | Update and install all system software updates"
  become: true
  command: /usr/sbin/softwareupdate --all --install --force --restart
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos
  async: 1000
  poll: 10
  register: xcode_install
  until: xcode_install.finished
  retries: 30
  delay: 10
  ignore_errors: true
  notify: xcode_install_status

- name: "Xcode | Install Command Line Developer Tools"
  become: true
  command: /usr/bin/xcode-select --install
  register: xcoderesult
  failed_when: "'FAILED' in xcoderesult.stderr"
  changed_when:
    - xcoderesult.rc == 0
    - '"command line tools are already installed" in xcoderesult.stderr'
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos
  async: 1000
  poll: 10
  until: xcoderesult.finished
  retries: 30
  delay: 10
  ignore_errors: true
  notify: xcode_install_status

- name: "DEBUG | Xcode installation status"
  debug: 
    msg: "{% if xcoderesult is defined %}{{ xcoderesult.stderr | default('Command line tools successfully processed') }}{% else %}Xcode installation process completed{% endif %}"
  when: ansible_os_family == 'Darwin'

#######################
# ROSETTA INSTALLATION #
#######################

- name: "DEBUG | Starting Rosetta 2 installation section"
  debug:
    msg: "Checking if Rosetta 2 installation is needed for Apple Silicon"

- name: "Rosetta | Install Rosetta 2 translation layer for M1/M2 Macs"
  command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
  register: rosetta
  failed_when:
    - rosetta.rc != 0
    - '"Installing Rosetta 2 on this system is not supported" not in rosetta.stdout'
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos

- name: "DEBUG | Rosetta installation status"
  debug:
    msg: "{% if rosetta.rc == 0 %}Rosetta 2 installation completed successfully{% elif 'Installing Rosetta 2 on this system is not supported' in rosetta.stdout|default('') %}Rosetta 2 not needed for this system (Intel Mac){% else %}Rosetta 2 installation failed or was already installed{% endif %}"
  when: ansible_os_family == 'Darwin'

#########################
# APPLICATION SELECTION #
#########################

- name: "DEBUG | Starting Application Installation Section"
  debug:
    msg: "Beginning installation of desktop applications and utilities"

- name: "Applications | Install desktop utility tools (Dash, Divvy, GPGTools)"
  homebrew_cask:
    name:
      - dash
      - divvy
      - gpgtools
    state: present
  register: utility_tools
  ignore_errors: true
  failed_when:
    - '"Error:" in utility_tools.msg'
    - '"It seems there is already" not in utility_tools.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | Desktop utility tools installation status"
  debug:
    msg: "{% if utility_tools.changed %}Desktop utility tools installed: {{ utility_tools.installed | default([]) }}{% else %}No changes to desktop utility tools{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install web browsers (Arc, Firefox, Chrome)"
  homebrew_cask:
    name:
      - arc
      - firefox
      - google-chrome
    state: present
  register: browsers
  ignore_errors: true
  failed_when:
    - '"Error:" in browsers.msg'
    - '"It seems there is already" not in browsers.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | Browser installation status"
  debug:
    msg: "{% if browsers.changed %}Browsers installed: {{ browsers.installed | default([]) }}{% else %}No changes to browsers{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install development tools (VS Code, Warp, Zed, GoLand, Postman, Insomnia)"
  homebrew_cask:
    name:
      - visual-studio-code
      - warp
      - zed
      - intellij-goland-ce
      - postman
      - insomnia
    state: present
  register: development_tools
  ignore_errors: true
  failed_when:
    - '"Error:" in development_tools.msg'
    - '"It seems there is already" not in development_tools.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | Development tools installation status"
  debug:
    msg: "{% if development_tools.changed %}Development tools installed: {{ development_tools.installed | default([]) }}{% else %}No changes to development tools{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install system utilities (Etcher, Caffeine, OnyX, Raycast, Archivers, Messaging)"
  homebrew_cask:
    name:
      - balenaetcher
      - caffeine
      - onyx
      - raycast
      - the-unarchiver
      - keka
      - omni-focus
      - telegram
      - whatsapp
    state: present
  register: utilities
  ignore_errors: true
  failed_when:
    - '"Error:" in utilities.msg'
    - '"It seems there is already" not in utilities.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | System utilities installation status"
  debug:
    msg: "{% if utilities.changed %}System utilities installed: {{ utilities.installed | default([]) }}{% else %}No changes to system utilities{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install productivity tools (Obsidian, Zoom, Microsoft Office)"
  homebrew_cask:
    name:
      - obsidian
      - zoom
      - microsoft-office
    state: present
  register: productivity_tools
  ignore_errors: true
  failed_when:
    - '"Error:" in productivity_tools.msg'
    - '"It seems there is already" not in productivity_tools.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | Productivity tools installation status"
  debug:
    msg: "{% if productivity_tools.changed %}Productivity tools installed: {{ productivity_tools.installed | default([]) }}{% else %}No changes to productivity tools{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install cloud storage tools (Yandex Disk)"
  homebrew_cask:
    name:
      - yandex-disk
    state: present
  register: file_sync_tools
  ignore_errors: true
  failed_when:
    - '"Error:" in file_sync_tools.msg'
    - '"It seems there is already" not in file_sync_tools.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | File sync tools installation status"
  debug:
    msg: "{% if file_sync_tools.changed %}File sync tools installed: {{ file_sync_tools.installed | default([]) }}{% else %}No changes to file sync tools{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

- name: "Applications | Install media applications (VLC, Handbrake, IINA)"
  homebrew_cask:
    name:
      - vlc
      - handbrake
      - iina
    state: present
  register: media_applications
  ignore_errors: true
  failed_when:
    - '"Error:" in media_applications.msg'
    - '"It seems there is already" not in media_applications.msg'
  when: ansible_os_family == 'Darwin'
  tags: common

- name: "DEBUG | Media applications installation status"
  debug:
    msg: "{% if media_applications.changed %}Media applications installed: {{ media_applications.installed | default([]) }}{% else %}No changes to media applications{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

###################
# FONTS SETUP     #
###################

- name: "DEBUG | Starting Font Installation Section"
  debug:
    msg: "Beginning installation of programming fonts"

- name: "Fonts | Add Homebrew cask-fonts repository" 
  homebrew_tap: name=homebrew/cask-fonts
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos

- name: "Fonts | Install programming fonts (Hack Nerd Font, Fira Code)"
  homebrew_cask:
    name:
      - font-hack-nerd-font
      - font-fira-code
    state: present
  register: fonts
  ignore_errors: true
  failed_when:
    - '"Error:" in fonts.msg'
    - '"It seems there is already" not in fonts.msg'
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos

- name: "DEBUG | Font installation status"
  debug:
    msg: "{% if fonts.changed %}Fonts installed: {{ fonts.installed | default([]) }}{% else %}No changes to fonts{% endif %}"
  when: ansible_os_family == 'Darwin'
  ignore_errors: true

############################
# MACOS SYSTEM PREFERENCES #
############################

- name: "DEBUG | Starting macOS System Preferences Section"
  debug:
    msg: "Configuring macOS system preferences"

- name: "macOS | Create screenshots directory on Desktop"
  vars:
    screenshot_dir: ~/Desktop/Screenshots
  register: screenshot_dir
  file:
      path: '{{ screenshot_dir }}'
      state: directory
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos

- name: "DEBUG | Screenshots directory creation status"
  debug:
    msg: "Screenshots directory created at {{ screenshot_dir.path }}"
  when: ansible_os_family == 'Darwin'

- name: "macOS | Configure screenshots to save to custom directory"
  command: "defaults write com.apple.screencapture location {{ screenshot_dir.path }}"
  when: ansible_os_family == 'Darwin'
  tags:
    - common
    - macos

- name: "DEBUG | Screenshot directory configuration status"
  debug:
    msg: "Screenshots will now be saved to {{ screenshot_dir.path }}"
  when: ansible_os_family == 'Darwin'

- name: "DEBUG | COMMON ROLE INSTALLATION COMPLETED"
  debug:
    msg: "All common system tools, applications, and configurations have been installed"

